esphome:
  name: m5stick-c1
  platform: ESP32
  board: m5stick-c
  includes:
    - util.h

external_components:
  - source: github://martydingo/esphome-axp192
    components: [axp192]

# Enable logging
logger:
  level: DEBUG
  logs:
    sensor: INFO
    axp192.sensor: INFO

ota:
  password: ""

remote_transmitter:
  pin:
    number: GPIO26
  carrier_duty_percent: 50%

mqtt:
  broker: !secret mqtt_office_broker
  username: !secret mqtt_office_user
  password: !secret mqtt_office_pw
  id: mqtt_client
  # Format of each message is "addr cmd"
  on_message:
    - topic: m5stick/irblast
      then:
        - remote_transmitter.transmit_nec:
            address: !lambda |-
              int addr;
              int n = sscanf(x.c_str(), "%i %*s", &addr);
              if (n != 1) {
                  return 0;
              }

              ESP_LOGD("irblast", "address: 0x%.2x", addr);

              return nec_format(addr & 0xff);

            command: !lambda |-
              int cmd;
              int n = sscanf(x.c_str(), "%*s %i", &cmd);
              if (n != 1) {
                  return 0;
              }

              ESP_LOGD("irblast", "command: 0x%.2x", cmd);

              return nec_format(cmd & 0xff);

text_sensor:
  - platform: mqtt_subscribe
    id: statustxt
    topic: office/m5stick/status

i2c:
  - id: internal_i2c
    sda: GPIO21
    scl: GPIO22
    scan: True

wifi:
  ssid: "kni"
  password: !secret kni_pw
  manual_ip:
    static_ip: 192.168.85.13
    gateway: 192.168.84.1
    subnet: 255.255.240.0
    dns1: 192.168.84.1



# AXP192 power management - must be present to use 5v output on the top, or to
# use the display
sensor:
  - platform: axp192
    model: M5STICKC
    address: 0x34
    i2c_id: internal_i2c
    update_interval: 30s
    battery_level:
      name: "M5Stick Battery Level"
      id: "m5stick_batterylevel"

binary_sensor:
  - platform: gpio
    id: button1
    pin:
      number: GPIO37
      inverted: true
    filters: &button_filters
      delayed_on_off: 40ms
    on_release:
      then:
        - mqtt.publish:
            topic: office/super
            payload: ding

  - platform: gpio
    id: button2
    pin:
      number: GPIO39
      inverted: true
    filters:
      <<: *button_filters
    on_release:
      then:
        - mqtt.publish:
            topic: office/monitor/restart
            payload: ding

output:
  - platform: ledc
    pin:
      number: GPIO10
      inverted: true
    id: gpio_10

light:
  - platform: monochromatic
    output: gpio_10
    id: red_led

# font:
#   - file: 'font.ttf'
#     id: font1
#     size: 8

#   - file: 'font.ttf'
#     id: font2
#     size: 24

#   - file: 'font.ttf'
#     id: font3
#     size: 14

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO15

# # builtin 80x160 TFT
# display:
#   - platform: st7735
#     cs_pin: GPIO5
#     dc_pin: GPIO23
#     reset_pin: GPIO18
#     rotation: 0
#     lambda: |-
#       it.print(it.get_width() / 2, it.get_height(), id(font3), ST77XX_WHITE, TextAlign::BOTTOM_CENTER, "Kill");
#       it.printf(it.get_width() / 2, 0, id(font3), ST77XX_WHITE, TextAlign::TOP_CENTER, "BAT%.0f%%", id(m5stick_batterylevel).state);
#       if (id(statustxt).has_state()) {
#           it.printf(it.get_width() / 2, it.get_height() / 2, id(font3), ST77XX_WHITE, TextAlign::CENTER, id(statustxt).state.c_str());
#       }
